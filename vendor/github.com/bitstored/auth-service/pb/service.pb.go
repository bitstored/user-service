// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	ValidatePasswordRequest
	ValidatePasswordResponse
	ValidateEmailRequest
	ValidateEmailResponse
	GenerateJWTRequest
	GenerateJWTResponse
	ValidateJWTRequest
	ValidateJWTResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ValidatePasswordRequest struct {
	Password string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
}

func (m *ValidatePasswordRequest) Reset()                    { *m = ValidatePasswordRequest{} }
func (m *ValidatePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidatePasswordRequest) ProtoMessage()               {}
func (*ValidatePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ValidatePasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ValidatePasswordResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	IsValid         bool   `protobuf:"varint,3,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
}

func (m *ValidatePasswordResponse) Reset()                    { *m = ValidatePasswordResponse{} }
func (m *ValidatePasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidatePasswordResponse) ProtoMessage()               {}
func (*ValidatePasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ValidatePasswordResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *ValidatePasswordResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *ValidatePasswordResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type ValidateEmailRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *ValidateEmailRequest) Reset()                    { *m = ValidateEmailRequest{} }
func (m *ValidateEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateEmailRequest) ProtoMessage()               {}
func (*ValidateEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ValidateEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type ValidateEmailResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	IsValid         bool   `protobuf:"varint,3,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
}

func (m *ValidateEmailResponse) Reset()                    { *m = ValidateEmailResponse{} }
func (m *ValidateEmailResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateEmailResponse) ProtoMessage()               {}
func (*ValidateEmailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ValidateEmailResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *ValidateEmailResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *ValidateEmailResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type GenerateJWTRequest struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=firstName" json:"firstName,omitempty"`
	Lastname  string `protobuf:"bytes,3,opt,name=lastname" json:"lastname,omitempty"`
	IsAdmin   bool   `protobuf:"varint,4,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
}

func (m *GenerateJWTRequest) Reset()                    { *m = GenerateJWTRequest{} }
func (m *GenerateJWTRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateJWTRequest) ProtoMessage()               {}
func (*GenerateJWTRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GenerateJWTRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GenerateJWTRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *GenerateJWTRequest) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *GenerateJWTRequest) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type GenerateJWTResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Token           string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *GenerateJWTResponse) Reset()                    { *m = GenerateJWTResponse{} }
func (m *GenerateJWTResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateJWTResponse) ProtoMessage()               {}
func (*GenerateJWTResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GenerateJWTResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *GenerateJWTResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *GenerateJWTResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ValidateJWTRequest struct {
	Token     string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	UserId    string `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=firstName" json:"firstName,omitempty"`
	Lastname  string `protobuf:"bytes,3,opt,name=lastname" json:"lastname,omitempty"`
	IsAdmin   bool   `protobuf:"varint,4,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
}

func (m *ValidateJWTRequest) Reset()                    { *m = ValidateJWTRequest{} }
func (m *ValidateJWTRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateJWTRequest) ProtoMessage()               {}
func (*ValidateJWTRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ValidateJWTRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ValidateJWTRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ValidateJWTRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ValidateJWTRequest) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

func (m *ValidateJWTRequest) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type ValidateJWTResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	IsValid         string `protobuf:"bytes,3,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	IsAdmin         bool   `protobuf:"varint,4,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	UserId          string `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ValidateJWTResponse) Reset()                    { *m = ValidateJWTResponse{} }
func (m *ValidateJWTResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateJWTResponse) ProtoMessage()               {}
func (*ValidateJWTResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ValidateJWTResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *ValidateJWTResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *ValidateJWTResponse) GetIsValid() string {
	if m != nil {
		return m.IsValid
	}
	return ""
}

func (m *ValidateJWTResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ValidateJWTResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func init() {
	proto.RegisterType((*ValidatePasswordRequest)(nil), "auth_service.ValidatePasswordRequest")
	proto.RegisterType((*ValidatePasswordResponse)(nil), "auth_service.ValidatePasswordResponse")
	proto.RegisterType((*ValidateEmailRequest)(nil), "auth_service.ValidateEmailRequest")
	proto.RegisterType((*ValidateEmailResponse)(nil), "auth_service.ValidateEmailResponse")
	proto.RegisterType((*GenerateJWTRequest)(nil), "auth_service.GenerateJWTRequest")
	proto.RegisterType((*GenerateJWTResponse)(nil), "auth_service.GenerateJWTResponse")
	proto.RegisterType((*ValidateJWTRequest)(nil), "auth_service.ValidateJWTRequest")
	proto.RegisterType((*ValidateJWTResponse)(nil), "auth_service.ValidateJWTResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthService service

type AuthServiceClient interface {
	ValidatePassword(ctx context.Context, in *ValidatePasswordRequest, opts ...grpc.CallOption) (*ValidatePasswordResponse, error)
	ValidateEmail(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*ValidateEmailResponse, error)
	GenerateJWT(ctx context.Context, in *GenerateJWTRequest, opts ...grpc.CallOption) (*GenerateJWTResponse, error)
	ValidateJWT(ctx context.Context, in *ValidateJWTRequest, opts ...grpc.CallOption) (*ValidateJWTResponse, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) ValidatePassword(ctx context.Context, in *ValidatePasswordRequest, opts ...grpc.CallOption) (*ValidatePasswordResponse, error) {
	out := new(ValidatePasswordResponse)
	err := grpc.Invoke(ctx, "/auth_service.AuthService/ValidatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateEmail(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*ValidateEmailResponse, error) {
	out := new(ValidateEmailResponse)
	err := grpc.Invoke(ctx, "/auth_service.AuthService/ValidateEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateJWT(ctx context.Context, in *GenerateJWTRequest, opts ...grpc.CallOption) (*GenerateJWTResponse, error) {
	out := new(GenerateJWTResponse)
	err := grpc.Invoke(ctx, "/auth_service.AuthService/GenerateJWT", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateJWT(ctx context.Context, in *ValidateJWTRequest, opts ...grpc.CallOption) (*ValidateJWTResponse, error) {
	out := new(ValidateJWTResponse)
	err := grpc.Invoke(ctx, "/auth_service.AuthService/ValidateJWT", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	ValidatePassword(context.Context, *ValidatePasswordRequest) (*ValidatePasswordResponse, error)
	ValidateEmail(context.Context, *ValidateEmailRequest) (*ValidateEmailResponse, error)
	GenerateJWT(context.Context, *GenerateJWTRequest) (*GenerateJWTResponse, error)
	ValidateJWT(context.Context, *ValidateJWTRequest) (*ValidateJWTResponse, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_ValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.AuthService/ValidatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidatePassword(ctx, req.(*ValidatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.AuthService/ValidateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateEmail(ctx, req.(*ValidateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.AuthService/GenerateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateJWT(ctx, req.(*GenerateJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.AuthService/ValidateJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateJWT(ctx, req.(*ValidateJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidatePassword",
			Handler:    _AuthService_ValidatePassword_Handler,
		},
		{
			MethodName: "ValidateEmail",
			Handler:    _AuthService_ValidateEmail_Handler,
		},
		{
			MethodName: "GenerateJWT",
			Handler:    _AuthService_GenerateJWT_Handler,
		},
		{
			MethodName: "ValidateJWT",
			Handler:    _AuthService_ValidateJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb5, 0x69, 0xd2, 0x26, 0xd3, 0x46, 0x54, 0xdb, 0xa0, 0x1a, 0x53, 0x50, 0x70, 0x44,
	0x55, 0x24, 0x14, 0x0b, 0x10, 0x0f, 0x50, 0x10, 0x42, 0x20, 0x81, 0x50, 0x40, 0x20, 0x71, 0x89,
	0xb6, 0xf5, 0x90, 0xae, 0x48, 0xbc, 0xc6, 0xbb, 0x49, 0x0f, 0x88, 0x4b, 0x24, 0x0e, 0x70, 0xe5,
	0xc2, 0x83, 0xf0, 0x26, 0xbc, 0x02, 0x0f, 0x82, 0x76, 0xbd, 0x9b, 0xda, 0x4e, 0xeb, 0x9e, 0x9a,
	0x5b, 0x66, 0xf2, 0xaf, 0xff, 0x6f, 0x67, 0x67, 0x06, 0xda, 0x12, 0xd3, 0x19, 0x3f, 0xc6, 0x7e,
	0x92, 0x0a, 0x25, 0xe8, 0x16, 0x9b, 0xaa, 0x93, 0xa1, 0xcd, 0xf9, 0x7b, 0x23, 0x21, 0x46, 0x63,
	0x0c, 0x59, 0xc2, 0x43, 0x16, 0xc7, 0x42, 0x31, 0xc5, 0x45, 0x2c, 0x33, 0x6d, 0xf0, 0x18, 0x76,
	0xdf, 0xb3, 0x31, 0x8f, 0x98, 0xc2, 0x37, 0x4c, 0xca, 0x53, 0x91, 0x46, 0x03, 0xfc, 0x32, 0x45,
	0xa9, 0xa8, 0x0f, 0xcd, 0xc4, 0xa6, 0x3c, 0xd2, 0x25, 0x07, 0xad, 0xc1, 0x22, 0x0e, 0xbe, 0x13,
	0xf0, 0x96, 0xcf, 0xc9, 0x44, 0xc4, 0x12, 0x69, 0x0f, 0xda, 0xa9, 0xfd, 0x3d, 0x3c, 0x16, 0x11,
	0x9a, 0xd3, 0x8d, 0xc1, 0x96, 0x4b, 0x3e, 0x15, 0x11, 0xd2, 0x7b, 0xb0, 0xbd, 0x10, 0x4d, 0x50,
	0x4a, 0x36, 0x42, 0xaf, 0x66, 0x5c, 0xae, 0xb9, 0xfc, 0xab, 0x2c, 0x4d, 0x6f, 0x40, 0x93, 0xcb,
	0xe1, 0x4c, 0xdb, 0x79, 0x6b, 0x5d, 0x72, 0xd0, 0x1c, 0x6c, 0x70, 0x69, 0xdc, 0x83, 0xfb, 0xd0,
	0x71, 0x18, 0xcf, 0x26, 0x8c, 0x8f, 0x1d, 0x7b, 0x07, 0x1a, 0xa8, 0x63, 0x0b, 0x9e, 0x05, 0xc1,
	0x9c, 0xc0, 0xf5, 0x92, 0x7c, 0xf5, 0xc8, 0x73, 0x02, 0xf4, 0x39, 0xc6, 0x98, 0x32, 0x85, 0x2f,
	0x3f, 0xbc, 0x73, 0xc4, 0xbb, 0xb0, 0x31, 0x95, 0x98, 0x0e, 0xb9, 0x2b, 0xf6, 0xba, 0x0e, 0x5f,
	0x44, 0x74, 0x0f, 0x5a, 0x9f, 0x78, 0x2a, 0xd5, 0x6b, 0x36, 0x71, 0x76, 0x67, 0x09, 0xfd, 0x48,
	0x63, 0x26, 0x55, 0xac, 0xff, 0x5c, 0xcb, 0x1e, 0xc9, 0xc5, 0x16, 0x82, 0x45, 0x13, 0x1e, 0x7b,
	0x75, 0x07, 0x71, 0xa8, 0xc3, 0xe0, 0x2b, 0xec, 0x14, 0x18, 0xae, 0xa8, 0x0c, 0x1d, 0x68, 0x28,
	0xf1, 0x19, 0x63, 0x8b, 0x96, 0x05, 0xc1, 0x6f, 0x02, 0xd4, 0x3d, 0x43, 0xae, 0x02, 0x0b, 0x31,
	0xc9, 0x89, 0xf3, 0x75, 0x69, 0x5c, 0x7d, 0x5d, 0xfe, 0x10, 0xd8, 0x29, 0xa0, 0xad, 0xa8, 0x3f,
	0x5a, 0x8b, 0xfe, 0xa8, 0xa0, 0xbb, 0xb0, 0x16, 0x0f, 0x7f, 0xd6, 0x61, 0xf3, 0x70, 0xaa, 0x4e,
	0xde, 0x66, 0x33, 0x4f, 0x7f, 0x10, 0xd8, 0x2e, 0x8f, 0x27, 0xbd, 0xdb, 0xcf, 0xef, 0x85, 0xfe,
	0x05, 0x63, 0xef, 0xef, 0x5f, 0x26, 0xcb, 0x6e, 0x12, 0xec, 0xcf, 0xff, 0xfe, 0xfb, 0x55, 0xeb,
	0xd2, 0xdb, 0xa1, 0xd6, 0x9b, 0xf5, 0x32, 0x7b, 0x10, 0xba, 0x0d, 0x11, 0xce, 0xec, 0x39, 0xfa,
	0x0d, 0xda, 0x85, 0x99, 0xa3, 0xc1, 0xf9, 0x06, 0xf9, 0xf9, 0xf5, 0x7b, 0x95, 0x1a, 0x4b, 0xd0,
	0x33, 0x04, 0xb7, 0xe8, 0xcd, 0x02, 0x81, 0x19, 0xf5, 0x33, 0xfb, 0x53, 0xd8, 0xcc, 0x75, 0x3a,
	0xed, 0x16, 0x3f, 0xbc, 0x3c, 0x88, 0xfe, 0x9d, 0x0a, 0x45, 0xa5, 0xb1, 0xe9, 0xd7, 0x70, 0x64,
	0xf5, 0xda, 0x38, 0xd7, 0x49, 0x65, 0xe3, 0xe5, 0xfe, 0x2f, 0x1b, 0x9f, 0xd3, 0x86, 0x95, 0xc6,
	0xee, 0xc6, 0x4f, 0xea, 0x1f, 0x6b, 0xc9, 0xd1, 0xd1, 0xba, 0xd9, 0xef, 0x8f, 0xfe, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xf7, 0xb0, 0xb6, 0x17, 0x1c, 0x06, 0x00, 0x00,
}
